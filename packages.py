# -*- coding: utf-8 -*-
"""
Created on Sat Mar 13 22:22:51 2021

@author: Kevin
"""

def getMaxPackageKoordniate(packages):
    x = 0
    y = 0
    z = 0
    for package in packages:
        x = x if x > package[0] else package[0]
        y = y if y > package[1] else package[1]
        z = z if z > package[2] else package[2]
    return [x,y,z]

def pickBiggestPackage(packages):
    max_vol = 0
    max_vol_index = -1
    for i, package in enumerate(packages):
        vol = package[0]*package[1]*package[2]
        if(max_vol < vol):
            max_vol_index = i
            max_vol = vol
    return max_vol_index, max_vol

def fittingPackages(package_types, package):
    list_of_indexes = []
    
    for i, package_type in enumerate(package_types):
        #Check X
        if package_type[0] < package[0]:
            continue
        #Check Y
        if package_type[1] < package[1]:
            continue
        #Check Z
        if package_type[2] < package[2]:
            continue
        list_of_indexes.append(i)
    return list_of_indexes
    
    
def pickLowestCost(package_costs, allowed_packages):
    import numpy as np
    
    costs = np.infty
    best_index = -1
    
    for i in allowed_packages:
        if costs > package_costs[i]:
            best_index = i
            costs = package_costs[i]
    return best_index

def calcCosts(used_packages, prices):
    sum_ = 0
    for pack in used_packages:
        sum_ += prices[pack]
    return sum_

     
if __name__ == '__main__':
    #Args
    package_types = [[10,20,15], [10,10,10]]
    package_costs = [50, 25]
    packages = [[10,10,5],[5,5,5],[9,4,5],[10,20,10],[10,10,10]]
    #Volumes that are generated by putting Package into Pack

    used_packages = []
    article_positions = []
    
    for i, package in enumerate(packages):
        #Check Boxes where the package fits
        fitting_packs = fittingPackages(package_types, package)
        #Check the lowest Cost pack
        lowest_cost_pack = pickLowestCost(package_costs, fitting_packs)
        used_packages.append(lowest_cost_pack)
        article_positions.append([i, 0,0,0])
    print(used_packages)
    print(article_positions)
    print(f'Costs: {calcCosts(used_packages, package_costs)}')
        
        
        

    